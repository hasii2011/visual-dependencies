
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from visualdependencies.PipTreeAdapter import PackageName
from visualdependencies.PipTreeAdapter import PackageNames
from visualdependencies.PipTreeAdapter import PipTreeAdapter
from visualdependencies.model.TypesV2 import Dependency
from visualdependencies.model.TypesV2 import Package

from visualdependencies.model.TypesV2 import Packages


PACKAGE_NAME:    str = 'click'
PACKAGE_VERSION: str = '8.1.7'


class TestPipTreeAdapter(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo - Humberto A. Sanchez II
        Generated:  06 January 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

    def tearDown(self):
        super().tearDown()

    def testGetAllPackages(self):

        sitePackagePath: str = '/Users/humberto.a.sanchez.ii/PycharmProjects/pytrek/pyenv-3.10.13/lib/python3.10/site-packages'
        pipTreeAdapter:  PipTreeAdapter = PipTreeAdapter()

        packages: Packages = pipTreeAdapter.execute(packageNames=PackageNames([]), sitePackagePath=sitePackagePath)

        self.assertTrue(len(packages) != 0, 'We should have something!!')

    def testFilterPackages(self):

        sitePackagePath: str = '/Users/humberto.a.sanchez.ii/PycharmProjects/pytrek/pyenv-3.10.13/lib/python3.10/site-packages'
        pipTreeAdapter:  PipTreeAdapter = PipTreeAdapter()

        packageName:  PackageName  = PackageName('pip')
        packageNames: PackageNames = PackageNames([])
        packageNames.append(packageName)

        packages: Packages = pipTreeAdapter.execute(packageNames=packageNames, sitePackagePath=sitePackagePath)

        self.assertTrue(len(packages) == 1, 'We only wanted 1 !!!')

        package: Package = packages[0]
        self.assertEqual('pip', package.information.packageName, 'We got the wrong one')

    def testSimpleRequirement(self):
        require: str = f'{PACKAGE_NAME}=={PACKAGE_VERSION}'
        self._runTest(require=require, operator='==')

    def testApproximateRequirement(self):
        require: str = f'{PACKAGE_NAME}~={PACKAGE_VERSION}'
        self._runTest(require=require, operator='~=')

    def testLessThanRequirement(self):
        require: str = f'{PACKAGE_NAME}<{PACKAGE_VERSION}'
        self._runTest(require=require, operator='<')

    def testGreaterThanRequirement(self):
        require: str = f'{PACKAGE_NAME}>{PACKAGE_VERSION}'
        self._runTest(require=require, operator='>')

    def testGEQRequirement(self):
        require: str = f'{PACKAGE_NAME}>={PACKAGE_VERSION}'
        self._runTest(require=require, operator='>=')

    def testLEQRequirement(self):
        require: str = f'{PACKAGE_NAME}<={PACKAGE_VERSION}'
        self._runTest(require=require, operator='<=')

    def testNEQRequirement(self):
        require: str = f'{PACKAGE_NAME}!={PACKAGE_VERSION}'
        self._runTest(require=require, operator='!=')

    def testComplexRequirement(self):
        require: str = 'charset-normalizer<4,>=2'

        pipTreeAdapter:   PipTreeAdapter = PipTreeAdapter()

        dependency: Dependency = pipTreeAdapter._extractDependency(require=require)

        self.assertEqual('charset-normalizer', dependency.packageName)

        self.assertEqual('< 4, >= 2', dependency.version, 'Invalid complex version')

    def testStripSpaces(self):

        require: str = 'charset-normalizer <4,>=2 '     # Note the white space

        pipTreeAdapter:   PipTreeAdapter = PipTreeAdapter()

        dependency: Dependency = pipTreeAdapter._extractDependency(require=require)

        self.assertEqual('charset-normalizer', dependency.packageName)

        self.assertEqual('< 4, >= 2', dependency.version, 'Invalid complex spaced version')

    def testPythonSpecified(self):
        require: str = "numpy; python_version >= \"3.0\" and python_version < \"3.12\""

        pipTreeAdapter:   PipTreeAdapter = PipTreeAdapter()

        dependency: Dependency = pipTreeAdapter._extractDependency(require=require)

        self.assertEqual('numpy', dependency.packageName, 'Mismatched package name')

    def _runTest(self, require: str, operator: str):

        pipTreeAdapter:   PipTreeAdapter = PipTreeAdapter()

        dependency: Dependency = pipTreeAdapter._extractDependency(require=require)

        self.assertEqual(PACKAGE_NAME,    dependency.packageName, 'Mismatched package name')

        packageVersion: str = f'{operator} {PACKAGE_VERSION}'
        self.assertEqual(packageVersion, dependency.version, 'Invalid version')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestPipTreeAdapter))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
